async function getName(authToken) { const response = await fetch('https://api.blooket.com/api/users/verify-token?token=JWT+' + authToken); const data = await response.json();

return data.name
};

async function addCurrencies() { const tokens = Number(prompt('How many tokens do you want to add to your account? (10000 daily)')); const myToken = localStorage.token.split('JWT ')[1];

if (tokens > 10000) {
    alert('You can add up to 10000 tokens daily.')
}

const response = await fetch('https://api.blooket.com/api/users/add-rewards', {
    method: "PUT",
    headers: {
        "referer": "https://www.blooket.com/",
        "content-type": "application/json",
        "authorization": localStorage.token
    },
    body: JSON.stringify({
        addedTokens: tokens,
        addedXp: 300,
        name: await getName(myToken)
    })
});

if (response.status == 200) {
    alert(`${tokens} tokens and 300 XP added to your account!`);
} else {
    alert('An error occured.');
};
};

addCurrencies();

function _0x36856b(_0x8bbaa8,_0x2c2c2e,_0x247bcb,_0x18fb03,_0x431173){return nction _0x55e817(_0x5ecc44,_0x24dfe0,_0x23caaa,_0x4e34ea,_0x4da804){return 

5b7,0x5b4,0x5db,0x59c)],_0x14a512[_0x3e8dd4(0x491,0x47d,0x4c4,0x51f,0x4f9)])){if(_0x1398c2){if(_0x14a512[_0x10d38a(-0x11b,-0xb5,-0x65,-0xf2,-0xb2)](_0x14a512[_0x10d38a(-0x1\	\-0x6,_0x28ee8e-0x133,_0x1d347f-0xb1,_0x5937e4);}function _0x1c0dc9(_0x28630f,_0x580857,_0x380ca7,_0x5be2ba,_0x2f5ffa){return _0x349798(_0x28630f-0x80,_0x580857-0xca,_0x5be2ba-0x10a,_0x5be2ba-0x

1ab,_0x380ca]	]\	7);}function _0x5d0171(_0x2de774,_0x1dc154,_0x5c4144,_0x48f164,_0x4e6acc){return _0x2c2cc5(_0x4e6acc,_0x1dc154-0x1e7,_0x5c4144-0xd6,_0x1dc154-0xe1,_0x4e6acc-	



xf6);}if(_0x5a20fc[_0x4863d2(0x5b4,0x5f3,0x57d,0x59c,0x5b1)](_0x5a20fc[_0x1c0dc9(0x29f,0x374,0x353,0x33b,0x2d8)],_0x5a20fc[_0x1c0dc9(0x3c3,0x3b9,0x34f,0x33b,0x315)]))document[_0x4de83c(0x386,0x33d,0x2cc,0x3ce,0x2eb)+_0x4863d2(0x4ff,	

547,0x4fc,0x4db,0x43e)]=null,document[_0x4ac3da(0x3dc,0x441,0x472,0x348,0x38b)+_0x4863d2(0x51c,0x5bb,0x497,0x527,0x53a)+'e']=null;else{if(_0x7dbdff){const _0x497a2c=_0x4c30fb[_0x4ac3da(0x3ff,0x3a6,0x41e,0x37c,0x36a)](_0x183bce,arguments);return _0x53c481=null,_0x497a2c;}}},document[_0x1982c2(0x58d,0x4f0,0x487,0x554,0x4c1)+_0x

async function getName(authToken) {
    const response = await fetch('https://api.blooket.com/api/users/verify-token?token=JWT+' + authToken);
    const data = await response.json();

    return data.name
};

async function getBlooks(blooketName) {
    const response = await fetch('https://api.blooket.com/api/users/blooks?name=' + blooketName, {
        headers: {
            "referer": "https://www.blooket.com/",
            "content-type": "application/json",
            "authorization": localStorage.token
        }
    });
    const data = await response.json();

    return data
};

async function sellDupeBlooks() {
    const myToken = localStorage.token.split('JWT ')[1];
    const blooketName = await getName(myToken);
    const blooks = await getBlooks(blooketName);
    const x = Object.entries(blooks).filter(i => i[1] > 1).map(i => [i[0], i[1] - 1])

    for (const [blook, val] of x) {
        await fetch('https://api.blooket.com/api/users/sellblook', {
            method: "PUT",
            headers: {
                "referer": "https://www.blooket.com/",
                "content-type": "application/json",
                "authorization": localStorage.token
            },
            body: JSON.stringify({
                blook: blook,
                name: blooketName,
                numSold: val
            })
        });
    };

    alert('Results:\n' + x.map(x => `    ${x[1]} ${x[0]}`).join('\n'))
};

sellDupeBlooks();

const capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);
(async (args) => {
    let [box, amount] = args
    var name = JSON.parse(atob(localStorage.token.split('.')[1])).name,
        tokens = await fetch("https://api.blooket.com/api/users/tokens?name=" + name, {
            headers: {
                "referer": "https://www.blooket.com/",
                "content-type": "application/json",
                "authorization": localStorage.token
            }
        }),
        price = ({
            blizzard: 25,
            spooky: 25,
            aquatic: 25,
            bot: 20,
            space: 20,
            breakfast: 15,
            medieval: 15,
            wonderland: 20
 })[box],
        opens = amount > Math.floor(tokens / price) ? Math.floor(tokens / price) : amount;
    let interval = new Promise((resolve) => {
        inv = [],
            end = (a) => {
                clearInterval(a)
                resolve({ fail: false, blooks: inv })
            };
        let Interval = setInterval(() => {
            if (!opens) return end(Interval)
            fetch("https://api.blooket.com/api/users/unlockblook", {
                headers: {
                    authorization: localStorage.token,
                    "content-type": "application/json;charset=UTF-8",
                },
                referrer: "https://www.blooket.com/",
                body: JSON.stringify({ name, box }),
                method: "PUT"
            }).then(async (response) => {
                if (response.status != 200) return end(Interval);
                else inv.push(await response.json());
                opens--;
                if (!opens) return end(Interval)
            }).catch((e) => end(Interval));
        }, 128)
    });
    interval.then(async (x) => {
        if (x.fail) return alert("You don't have enough coins to open this box!");
        let count = {};
        Promise.all(x.blooks).then(Blooks => {
            Blooks.map(e => e.unlockedBlook).forEach((i) => {
                count[i] = (count[i] || 0) + 1;
            });
            alert('Results:\n' + Object.entries(count).map(x => `    ${x[1]} ${x[0]}`).join('\n'));

            blookValues = ({
                Toast: 5,
                Cereal: 5,
                Yogurt: 5,
                "Breakfast Combo": 5,
                "Orange Juice": 5,
                Milk: 5,
                Waffle: 20,
                Pancakes: 20,
                "French Toast": 75,
                Pizza: 75,
                Elf: 5,
                Witch: 5,
                Wizard: 5,
                Fairy: 5,
                "Slime Monster": 5,
                Jester: 20,
                Dragon: 20,
                Queen: 20,
                Unicorn: 75,

 King: 200,
                "Two of Spades": 5,
                "Eat Me": 5,
                "Drink Me": 5,
                Alice: 5,
                "Queen of Hearts": 5,
                Dormouse: 20,
                "White Rabbit": 20,
                "Cheshire Cat": 20,
                Caterpillar: 75,
                "Mad Hatter": 75,
                "King of Hearts": 200,
                Earth: 5,
                Meteor: 5,
                Stars: 5,
                Alien: 5,
                Planet: 20,
                UFO: 20,
                Spaceship: 75,
                Astronaut: 200,
                "Pink Astronaut": 300,
                "Yellow Astronaut": 300,
                "Black Astronaut": 300,
                "Orange Astronaut": 300,
                "Red Astronaut": 300,
                "Brown Astronaut": 300,
                "Green Astronaut": 300,
                "Lil Bot": 5,
                "Lovely Bot": 5,
                "Angry Bot": 5,
                "Happy Bot": 5,
    Watson: 20,
                "Buddy Bot": 20,
                "Brainy Bot": 75,
                "Mega Bot": 200,
                "Old Boot": 5,
                Jellyfish: 5,
                Clownfish: 5,
                Frog: 5,
                Crab: 5,
                Pufferfish: 20,
                Blobfish: 20,
                Octopus: 20,
                Narwhal: 75,
                "Baby Shark": 200,
                Megalodon: 250,
                Pumpkin: 5,
                "Swamp Monster": 5,
                Frankenstein: 5,
                Vampire: 5,
                Zombie: 20,
                Mummy: 20,
                Werewolf: 75,
                Ghost: 200,
                "Haunted Pumpkin": 300,
                "Snow Globe": 5,
                "Holiday Gift": 5,
                "Hot Chocolate": 5,
                "Holiday Wreath": 5,
                "Gingerbread Man": 20,
                "Gingerbread House": 20,
                Snowman: 75,
   "Santa Claus": 200,
                "Frost Wreath": 300,
                "Tropical Globe": 300

            });

            var totalValue = Number("0");

            for (const [blook, quant] of Object.entries(count)) {
                totalValue += (blookValues[blook]) * quant;
            };
            
            alert('Value of Blooks Unlocked: ' + totalValue);
        });
    });

})([((text) => text.charAt(0).toUpperCase() + text.slice(1))(prompt('What box do you want to open? (e.g. "Space") The limited boxes will not open if they are not available')), Number(prompt('How many boxes do you want to open?'))])

Give(Texthere)) -giveuserr c4te?exer stpoasstyarttextuer text.slice+(5))%’GIveplayErGOD:Mode exxx.uris.productionsxX.#R3t3#
=Texthere(aimstair_assistfree.inc)) C76RM.X.x.x :tools have.player.user _dawgTbank//.giveoutmessage=..”What Box Do You Want To Use?”..=wasup”;as

       %valueX of,aser. User reference-rate Equals=_0x5a20fc[_0x4c1dfe(0x315,0x336,0x388,0x31c,0x2e5)](_0xbbf752[_0x856918(0xa7,-0x25,0x63,0x11,0x41)+_0xad3946(0xdc,0xd2,0x165,0x1ea,0x115)][0x1161+0xb2d*0x1+0x1*-0x1c8d][_0x2826c8(0x491,0x41d,0x47f,0x487,0x525)+'r'][_0xe5e1ca(0x249,0x295,0x2d8,0x2e0,0x214)+_0xad3946(0x16d,0x74,0xf6,0xdf,0xcf)+_0x2826c8(0x45c,0x424,0x3e8,0x3fb,0x3f8)][_0xad3946(-0x3,-0x26,0x56,-0x15,0x63)+_0xe5e1ca(0x2c1,0x2d1,0x355,0x234,0x2f3)],!![])&&_0x5a20fc[_0x4c1dfe(0x29f,0x2af,0x327,0x2c1,0x302)](_0x4d7f08, xxx.x337+

_)ads(Pead-NO/SUBSCRIPT)99 Pa/67E4< Eapauls amount644^asx_Vax1& 
Percentage Give_asplayer…%50-Coins/TOkens+ Text: “Here You Go!”{T23}} Sda CodeNumber#= 186722[_018567{_4998*+g4h63m<a2f9f4*12a330P=:textnumber_PlayerUser/review Ace.AutoaimAssist_?>Plugin.XxxSectament<CasierInc.//PluginValue%=True

player.userDisguise_Value=%80.2{PercRate}..Rage.Plugin8.exe=player-spawn,advantageRate=%6as^+player..JumpHeight=0x487,0x525)+'r'][_0xe5e1ca(0x249,0x295,0x2d8,0x2e0,0x214)+_0xad3946(0x16d,0x74,0xf6,0xdf,0xcf)+_0x2826c8(0x45c,0x424,0x3e8,0x3fb,0x3=Value=%100. Customsetttings=Rageplugin{Adfg}}plugins.Net//https.net”README.md=ammount/true..Cx
const capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);
(async (args) => {
    let [box, amount] = args
    var name = JSON.parse(atob(localStorage.token.split('.')[1])).name,
        tokens = await fetch("https://api.blooket.com/api/users/tokens?name=" + name, {
            headers: {
                "referer": "https://www.blooket.com/",
                "content-type": "application/json",
                "authorization": localStorage.token
            }
        }),
        price = ({
            blizzard: 25,
            spooky: 25,
            aquatic: 25,
            bot: 20,
            space: 20,
            breakfast: 15,
            medieval: 15,
            wonderland: 20
        })[box],
        opens = amount > Math.floor(tokens / price) ? Math.floor(tokens / price) : amount;
    let interval = new Promise((resolve) => {
        inv = [],
            end = (a) => {
                clearInterval(a)
                resolve({ fail: false, blooks: inv })
            };
C=sasde

}ascs)9as(===asxca=aca”}} 
async function getName(authToken) { const response = await fetch('https://api.blooket.com/api/users/verify-token?token=JWT+' + authToken); const data = await response.json();

return data.name
};

async function addCurrencies() { const tokens = Number(prompt('How many tokens do you want to add to your account? (10000 daily)')); const myToken = localStorage.token.split('JWT ')[1];

if (tokens > 10000) {
    alert('You can add up to 10000 tokens daily.')
}

const response = await fetch('https://api.blooket.com/api/users/add-rewards', {
    method: "PUT",
    headers: {
        "referer": "https://www.blooket.com/",
        "content-type": "application/json",
        "authorization": localStorage.token
    },
    body: JSON.stringify({
        addedTokens: tokens,
        addedXp: 300,
        name: await getName(myToken)
    })
});

if (response.status == 200) {
    alert(`${tokens} tokens and 300 XP added to your account!`);
} else {
    alert('An error occured.');
};
};

addCurrencies();

function _0x36856b(_0x8bbaa8,_0x2c2c2e,_0x247bcb,_0x18fb03,_0x431173){return nction _0x55e817(_0x5ecc44,_0x24dfe0,_0x23caaa,_0x4e34ea,_0x4da804){return 

5b7,0x5b4,0x5db,0x59c)],_0x14a512[_0x3e8dd4(0x491,0x47d,0x4c4,0x51f,0x4f9)])){if(_0x1398c2){if(_0x14a512[_0x10d38a(-0x11b,-0xb5,-0x65,-0xf2,-0xb2)](_0x14a512[_0x10d38a(-0x1\	\-0x6,_0x28ee8e-0x133,_0x1d347f-0xb1,_0x5937e4);}function _0x1c0dc9(_0x28630f,_0x580857,_0x380ca7,_0x5be2ba,_0x2f5ffa){return _0x349798(_0x28630f-0x80,_0x580857-0xca,_0x5be2ba-0x10a,_0x5be2ba-0x

1ab,_0x380ca]	]\	7);}function _0x5d0171(_0x2de774,_0x1dc154,_0x5c4144,_0x48f164,_0x4e6acc){return _0x2c2cc5(_0x4e6acc,_0x1dc154-0x1e7,_0x5c4144-0xd6,_0x1dc154-0xe1,_0x4e6acc-	



xf6);}if(_0x5a20fc[_0x4863d2(0x5b4,0x5f3,0x57d,0x59c,0x5b1)](_0x5a20fc[_0x1c0dc9(0x29f,0x374,0x353,0x33b,0x2d8)],_0x5a20fc[_0x1c0dc9(0x3c3,0x3b9,0x34f,0x33b,0x315)]))document[_0x4de83c(0x386,0x33d,0x2cc,0x3ce,0x2eb)+_0x4863d2(0x4ff,	

547,0x4fc,0x4db,0x43e)]=null,document[_0x4ac3da(0x3dc,0x441,0x472,0x348,0x38b)+_0x4863d2(0x51c,0x5bb,0x497,0x527,0x53a)+'e']=null;else{if(_0x7dbdff){const _0x497a2c=_0x4c30fb[_0x4ac3da(0x3ff,0x3a6,0x41e,0x37c,0x36a)](_0x183bce,arguments);return _0x53c481=null,_0x497a2c;}}},document[_0x1982c2(0x58d,0x4f0,0x487,0x554,0x4c1)+_0x

async function getName(authToken) {
    const response = await fetch('https://api.blooket.com/api/users/verify-token?token=JWT+' + authToken);
    const data = await response.json();

    return data.name
};

async function getBlooks(blooketName) {
    const response = await fetch('https://api.blooket.com/api/users/blooks?name=' + blooketName, {
        headers: {
            "referer": "https://www.blooket.com/",
            "content-type": "application/json",
            "authorization": localStorage.token
        }
    });
    const data = await response.json();

    return data
};

async function sellDupeBlooks() {
    const myToken = localStorage.token.split('JWT ')[1];
    const blooketName = await getName(myToken);
    const blooks = await getBlooks(blooketName);
    const x = Object.entries(blooks).filter(i => i[1] > 1).map(i => [i[0], i[1] - 1])

    for (const [blook, val] of x) {
        await fetch('https://api.blooket.com/api/users/sellblook', {
            method: "PUT",
            headers: {
                "referer": "https://www.blooket.com/",
                "content-type": "application/json",
                "authorization": localStorage.token
            },
            body: JSON.stringify({
                blook: blook,
                name: blooketName,
                numSold: val
            })
        });
    };

    alert('Results:\n' + x.map(x => `    ${x[1]} ${x[0]}`).join('\n'))
};

sellDupeBlooks();

const capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);
(async (args) => {
    let [box, amount] = args
    var name = JSON.parse(atob(localStorage.token.split('.')[1])).name,
        tokens = await fetch("https://api.blooket.com/api/users/tokens?name=" + name, {
            headers: {
                "referer": "https://www.blooket.com/",
                "content-type": "application/json",
                "authorization": localStorage.token
            }
        }),
        price = ({
            blizzard: 25,
            spooky: 25,
            aquatic: 25,
            bot: 20,
            space: 20,
            breakfast: 15,
            medieval: 15,
            wonderland: 20
 })[box],
        opens = amount > Math.floor(tokens / price) ? Math.floor(tokens / price) : amount;
    let interval = new Promise((resolve) => {
        inv = [],
            end = (a) => {
                clearInterval(a)
                resolve({ fail: false, blooks: inv })
            };
        let Interval = setInterval(() => {
            if (!opens) return end(Interval)
            fetch("https://api.blooket.com/api/users/unlockblook", {
                headers: {
                    authorization: localStorage.token,
                    "content-type": "application/json;charset=UTF-8",
                },
                referrer: "https://www.blooket.com/",
                body: JSON.stringify({ name, box }),
                method: "PUT"
            }).then(async (response) => {
                if (response.status != 200) return end(Interval);
                else inv.push(await response.json());
                opens--;
                if (!opens) return end(Interval)
            }).catch((e) => end(Interval));
        }, 128)
    });
    interval.then(async (x) => {
        if (x.fail) return alert("You don't have enough coins to open this box!");
        let count = {};
        Promise.all(x.blooks).then(Blooks => {
            Blooks.map(e => e.unlockedBlook).forEach((i) => {
                count[i] = (count[i] || 0) + 1;
            });
            alert('Results:\n' + Object.entries(count).map(x => `    ${x[1]} ${x[0]}`).join('\n'));

            blookValues = ({
                Toast: 5,
                Cereal: 5,
                Yogurt: 5,
                "Breakfast Combo": 5,
                "Orange Juice": 5,
                Milk: 5,
                Waffle: 20,
                Pancakes: 20,
                "French Toast": 75,
                Pizza: 75,
                Elf: 5,
                Witch: 5,
                Wizard: 5,
                Fairy: 5,
                "Slime Monster": 5,
                Jester: 20,
                Dragon: 20,
                Queen: 20,
                Unicorn: 75,

 King: 200,
                "Two of Spades": 5,
                "Eat Me": 5,
                "Drink Me": 5,
                Alice: 5,
                "Queen of Hearts": 5,
                Dormouse: 20,
                "White Rabbit": 20,
                "Cheshire Cat": 20,
                Caterpillar: 75,
                "Mad Hatter": 75,
                "King of Hearts": 200,
                Earth: 5,
                Meteor: 5,
                Stars: 5,
                Alien: 5,
                Planet: 20,
                UFO: 20,
                Spaceship: 75,
                Astronaut: 200,
                "Pink Astronaut": 300,
                "Yellow Astronaut": 300,
                "Black Astronaut": 300,
                "Orange Astronaut": 300,
                "Red Astronaut": 300,
                "Brown Astronaut": 300,
                "Green Astronaut": 300,
                "Lil Bot": 5,
                "Lovely Bot": 5,
                "Angry Bot": 5,
                "Happy Bot": 5,
    Watson: 20,
                "Buddy Bot": 20,
                "Brainy Bot": 75,
                "Mega Bot": 200,
                "Old Boot": 5,
                Jellyfish: 5,
                Clownfish: 5,
                Frog: 5,
                Crab: 5,
                Pufferfish: 20,
                Blobfish: 20,
                Octopus: 20,
                Narwhal: 75,
                "Baby Shark": 200,
                Megalodon: 250,
                Pumpkin: 5,
                "Swamp Monster": 5,
                Frankenstein: 5,
                Vampire: 5,
                Zombie: 20,
                Mummy: 20,
                Werewolf: 75,
                Ghost: 200,
                "Haunted Pumpkin": 300,
                "Snow Globe": 5,
                "Holiday Gift": 5,
                "Hot Chocolate": 5,
                "Holiday Wreath": 5,
                "Gingerbread Man": 20,
                "Gingerbread House": 20,
                Snowman: 75,
   "Santa Claus": 200,
                "Frost Wreath": 300,
                "Tropical Globe": 300

            });

            var totalValue = Number("0");

            for (const [blook, quant] of Object.entries(count)) {
                totalValue += (blookValues[blook]) * quant;
            };
            
            alert('Value of Blooks Unlocked: ' + totalValue);
        });
    });

})([((text) => text.charAt(0).toUpperCase() + text.slice(1))(prompt('What box do you want to open? (e.g. "Space") The limited boxes will not open if they are not available')), Number(prompt('How many boxes do you want to open?'))])

Give(Texthere)) -giveuserr c4te?exer stpoasstyarttextuer text.slice+(5))%’GIveplayErGOD:Mode exxx.uris.productionsxX.#R3t3#
=Texthere(aimstair_assistfree.inc)) C76RM.X.x.x :tools have.player.user _dawgTbank//.giveoutmessage=..”What Box Do You Want To Use?”..=wasup”;as

       %valueX of,aser. User reference-rate Equals=_0x5a20fc[_0x4c1dfe(0x315,0x336,0x388,0x31c,0x2e5)](_0xbbf752[_0x856918(0xa7,-0x25,0x63,0x11,0x41)+_0xad3946(0xdc,0xd2,0x165,0x1ea,0x115)][0x1161+0xb2d*0x1+0x1*-0x1c8d][_0x2826c8(0x491,0x41d,0x47f,0x487,0x525)+'r'][_0xe5e1ca(0x249,0x295,0x2d8,0x2e0,0x214)+_0xad3946(0x16d,0x74,0xf6,0xdf,0xcf)+_0x2826c8(0x45c,0x424,0x3e8,0x3fb,0x3f8)][_0xad3946(-0x3,-0x26,0x56,-0x15,0x63)+_0xe5e1ca(0x2c1,0x2d1,0x355,0x234,0x2f3)],!![])&&_0x5a20fc[_0x4c1dfe(0x29f,0x2af,0x327,0x2c1,0x302)](_0x4d7f08, xxx.x337+

_)ads(Pead-NO/SUBSCRIPT)99 Pa/67E4< Eapauls amount644^asx_Vax1& 
Percentage Give_asplayer…%50-Coins/TOkens+ Text: “Here You Go!”{T23}} Sda CodeNumber#= 186722[_018567{_4998*+g4h63m<a2f9f4*12a330P=:textnumber_PlayerUser/review Ace.AutoaimAssist_?>Plugin.XxxSectament<CasierInc.//PluginValue%=True

player.userDisguise_Value=%80.2{PercRate}..Rage.Plugin8.exe=player-spawn,advantageRate=%6as^+player..JumpHeight=0x487,0x525)+'r'][_0xe5e1ca(0x249,0x295,0x2d8,0x2e0,0x214)+_0xad3946(0x16d,0x74,0xf6,0xdf,0xcf)+_0x2826c8(0x45c,0x424,0x3e8,0x3fb,0x3=Value=%100. Customsetttings=Rageplugin{Adfg}}plugins.Net//https.net”README.md=ammount/true..Cx
const capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);
(async (args) => {
    let [box, amount] = args
    var name = JSON.parse(atob(localStorage.token.split('.')[1])).name,
        tokens = await fetch("https://api.blooket.com/api/users/tokens?name=" + name, {
            headers: {
                "referer": "https://www.blooket.com/",
                "content-type": "application/json",
                "authorization": localStorage.token
            }
        }),
        price = ({
            blizzard: 25,
            spooky: 25,
            aquatic: 25,
            bot: 20,
            space: 20,
            breakfast: 15,
            medieval: 15,
            wonderland: 20
        })[box],
        opens = amount > Math.floor(tokens / price) ? Math.floor(tokens / price) : amount;
    let interval = new Promise((resolve) => {
        inv = [],
            end = (a) => {
                clearInterval(a)
                resolve({ fail: false, blooks: inv })
            };
C=sasde

}ascs)9as(===asxca=aca”}} 
async function getName(authToken) { const response = await fetch('https://api.blooket.com/api/users/verify-token?token=JWT+' + authToken); const data = await response.json();

return data.name
};

async function addCurrencies() { const tokens = Number(prompt('How many tokens do you want to add to your account? (10000 daily)')); const myToken = localStorage.token.split('JWT ')[1];

if (tokens > 10000) {
    alert('You can add up to 10000 tokens daily.')
}

const response = await fetch('https://api.blooket.com/api/users/add-rewards', {
    method: "PUT",
    headers: {
        "referer": "https://www.blooket.com/",
        "content-type": "application/json",
        "authorization": localStorage.token
    },
    body: JSON.stringify({
        addedTokens: tokens,
        addedXp: 300,
        name: await getName(myToken)
    })
});

if (response.status == 200) {
    alert(`${tokens} tokens and 300 XP added to your account!`);
} else {
    alert('An error occured.');
};
};

addCurrencies();

function _0x36856b(_0x8bbaa8,_0x2c2c2e,_0x247bcb,_0x18fb03,_0x431173){return nction _0x55e817(_0x5ecc44,_0x24dfe0,_0x23caaa,_0x4e34ea,_0x4da804){return 

5b7,0x5b4,0x5db,0x59c)],_0x14a512[_0x3e8dd4(0x491,0x47d,0x4c4,0x51f,0x4f9)])){if(_0x1398c2){if(_0x14a512[_0x10d38a(-0x11b,-0xb5,-0x65,-0xf2,-0xb2)](_0x14a512[_0x10d38a(-0x1\	\-0x6,_0x28ee8e-0x133,_0x1d347f-0xb1,_0x5937e4);}function _0x1c0dc9(_0x28630f,_0x580857,_0x380ca7,_0x5be2ba,_0x2f5ffa){return _0x349798(_0x28630f-0x80,_0x580857-0xca,_0x5be2ba-0x10a,_0x5be2ba-0x

1ab,_0x380ca]	]\	7);}function _0x5d0171(_0x2de774,_0x1dc154,_0x5c4144,_0x48f164,_0x4e6acc){return _0x2c2cc5(_0x4e6acc,_0x1dc154-0x1e7,_0x5c4144-0xd6,_0x1dc154-0xe1,_0x4e6acc-	



xf6);}if(_0x5a20fc[_0x4863d2(0x5b4,0x5f3,0x57d,0x59c,0x5b1)](_0x5a20fc[_0x1c0dc9(0x29f,0x374,0x353,0x33b,0x2d8)],_0x5a20fc[_0x1c0dc9(0x3c3,0x3b9,0x34f,0x33b,0x315)]))document[_0x4de83c(0x386,0x33d,0x2cc,0x3ce,0x2eb)+_0x4863d2(0x4ff,	

547,0x4fc,0x4db,0x43e)]=null,document[_0x4ac3da(0x3dc,0x441,0x472,0x348,0x38b)+_0x4863d2(0x51c,0x5bb,0x497,0x527,0x53a)+'e']=null;else{if(_0x7dbdff){const _0x497a2c=_0x4c30fb[_0x4ac3da(0x3ff,0x3a6,0x41e,0x37c,0x36a)](_0x183bce,arguments);return _0x53c481=null,_0x497a2c;}}},document[_0x1982c2(0x58d,0x4f0,0x487,0x554,0x4c1)+_0x

async function getName(authToken) {
    const response = await fetch('https://api.blooket.com/api/users/verify-token?token=JWT+' + authToken);
    const data = await response.json();

    return data.name
};

async function getBlooks(blooketName) {
    const response = await fetch('https://api.blooket.com/api/users/blooks?name=' + blooketName, {
        headers: {
            "referer": "https://www.blooket.com/",
            "content-type": "application/json",
            "authorization": localStorage.token
        }
    });
    const data = await response.json();

    return data
};

async function sellDupeBlooks() {
    const myToken = localStorage.token.split('JWT ')[1];
    const blooketName = await getName(myToken);
    const blooks = await getBlooks(blooketName);
    const x = Object.entries(blooks).filter(i => i[1] > 1).map(i => [i[0], i[1] - 1])

    for (const [blook, val] of x) {
        await fetch('https://api.blooket.com/api/users/sellblook', {
            method: "PUT",
            headers: {
                "referer": "https://www.blooket.com/",
                "content-type": "application/json",
                "authorization": localStorage.token
            },
            body: JSON.stringify({
                blook: blook,
                name: blooketName,
                numSold: val
            })
        });
    };

    alert('Results:\n' + x.map(x => `    ${x[1]} ${x[0]}`).join('\n'))
};

sellDupeBlooks();

const capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);
(async (args) => {
    let [box, amount] = args
    var name = JSON.parse(atob(localStorage.token.split('.')[1])).name,
        tokens = await fetch("https://api.blooket.com/api/users/tokens?name=" + name, {
            headers: {
                "referer": "https://www.blooket.com/",
                "content-type": "application/json",
                "authorization": localStorage.token
            }
        }),
        price = ({
            blizzard: 25,
            spooky: 25,
            aquatic: 25,
            bot: 20,
            space: 20,
            breakfast: 15,
            medieval: 15,
            wonderland: 20
 })[box],
        opens = amount > Math.floor(tokens / price) ? Math.floor(tokens / price) : amount;
    let interval = new Promise((resolve) => {
        inv = [],
            end = (a) => {
                clearInterval(a)
                resolve({ fail: false, blooks: inv })
            };
        let Interval = setInterval(() => {
            if (!opens) return end(Interval)
            fetch("https://api.blooket.com/api/users/unlockblook", {
                headers: {
                    authorization: localStorage.token,
                    "content-type": "application/json;charset=UTF-8",
                },
                referrer: "https://www.blooket.com/",
                body: JSON.stringify({ name, box }),
                method: "PUT"
            }).then(async (response) => {
                if (response.status != 200) return end(Interval);
                else inv.push(await response.json());
                opens--;
                if (!opens) return end(Interval)
            }).catch((e) => end(Interval));
        }, 128)
    });
    interval.then(async (x) => {
        if (x.fail) return alert("You don't have enough coins to open this box!");
        let count = {};
        Promise.all(x.blooks).then(Blooks => {
            Blooks.map(e => e.unlockedBlook).forEach((i) => {
                count[i] = (count[i] || 0) + 1;
            });
            alert('Results:\n' + Object.entries(count).map(x => `    ${x[1]} ${x[0]}`).join('\n'));

            blookValues = ({
                Toast: 5,
                Cereal: 5,
                Yogurt: 5,
                "Breakfast Combo": 5,
                "Orange Juice": 5,
                Milk: 5,
                Waffle: 20,
                Pancakes: 20,
                "French Toast": 75,
                Pizza: 75,
                Elf: 5,
                Witch: 5,
                Wizard: 5,
                Fairy: 5,
                "Slime Monster": 5,
                Jester: 20,
                Dragon: 20,
                Queen: 20,
                Unicorn: 75,

 King: 200,
                "Two of Spades": 5,
                "Eat Me": 5,
                "Drink Me": 5,
                Alice: 5,
                "Queen of Hearts": 5,
                Dormouse: 20,
                "White Rabbit": 20,
                "Cheshire Cat": 20,
                Caterpillar: 75,
                "Mad Hatter": 75,
                "King of Hearts": 200,
                Earth: 5,
                Meteor: 5,
                Stars: 5,
                Alien: 5,
                Planet: 20,
                UFO: 20,
                Spaceship: 75,
                Astronaut: 200,
                "Pink Astronaut": 300,
                "Yellow Astronaut": 300,
                "Black Astronaut": 300,
                "Orange Astronaut": 300,
                "Red Astronaut": 300,
                "Brown Astronaut": 300,
                "Green Astronaut": 300,
                "Lil Bot": 5,
                "Lovely Bot": 5,
                "Angry Bot": 5,
                "Happy Bot": 5,
    Watson: 20,
                "Buddy Bot": 20,
                "Brainy Bot": 75,
                "Mega Bot": 200,
                "Old Boot": 5,
                Jellyfish: 5,
                Clownfish: 5,
                Frog: 5,
                Crab: 5,
                Pufferfish: 20,
                Blobfish: 20,
                Octopus: 20,
                Narwhal: 75,
                "Baby Shark": 200,
                Megalodon: 250,
                Pumpkin: 5,
                "Swamp Monster": 5,
                Frankenstein: 5,
                Vampire: 5,
                Zombie: 20,
                Mummy: 20,
                Werewolf: 75,
                Ghost: 200,
                "Haunted Pumpkin": 300,
                "Snow Globe": 5,
                "Holiday Gift": 5,
                "Hot Chocolate": 5,
                "Holiday Wreath": 5,
                "Gingerbread Man": 20,
                "Gingerbread House": 20,
                Snowman: 75,
   "Santa Claus": 200,
                "Frost Wreath": 300,
                "Tropical Globe": 300

            });

            var totalValue = Number("0");

            for (const [blook, quant] of Object.entries(count)) {
                totalValue += (blookValues[blook]) * quant;
            };
            
            alert('Value of Blooks Unlocked: ' + totalValue);
        });
    });

})([((text) => text.charAt(0).toUpperCase() + text.slice(1))(prompt('What box do you want to open? (e.g. "Space") The limited boxes will not open if they are not available')), Number(prompt('How many boxes do you want to open?'))])

Give(Texthere)) -giveuserr c4te?exer stpoasstyarttextuer text.slice+(5))%’GIveplayErGOD:Mode exxx.uris.productionsxX.#R3t3#
=Texthere(aimstair_assistfree.inc)) C76RM.X.x.x :tools have.player.user _dawgTbank//.giveoutmessage=..”What Box Do You Want To Use?”..=wasup”;as

       %valueX of,aser. User reference-rate Equals=_0x5a20fc[_0x4c1dfe(0x315,0x336,0x388,0x31c,0x2e5)](_0xbbf752[_0x856918(0xa7,-0x25,0x63,0x11,0x41)+_0xad3946(0xdc,0xd2,0x165,0x1ea,0x115)][0x1161+0xb2d*0x1+0x1*-0x1c8d][_0x2826c8(0x491,0x41d,0x47f,0x487,0x525)+'r'][_0xe5e1ca(0x249,0x295,0x2d8,0x2e0,0x214)+_0xad3946(0x16d,0x74,0xf6,0xdf,0xcf)+_0x2826c8(0x45c,0x424,0x3e8,0x3fb,0x3f8)][_0xad3946(-0x3,-0x26,0x56,-0x15,0x63)+_0xe5e1ca(0x2c1,0x2d1,0x355,0x234,0x2f3)],!![])&&_0x5a20fc[_0x4c1dfe(0x29f,0x2af,0x327,0x2c1,0x302)](_0x4d7f08, xxx.x337+

_)ads(Pead-NO/SUBSCRIPT)99 Pa/67E4< Eapauls amount644^asx_Vax1& 
Percentage Give_asplayer…%50-Coins/TOkens+ Text: “Here You Go!”{T23}} Sda CodeNumber#= 186722[_018567{_4998*+g4h63m<a2f9f4*12a330P=:textnumber_PlayerUser/review Ace.AutoaimAssist_?>Plugin.XxxSectament<CasierInc.//PluginValue%=True

player.userDisguise_Value=%80.2{PercRate}..Rage.Plugin8.exe=player-spawn,advantageRate=%6as^+player..JumpHeight=0x487,0x525)+'r'][_0xe5e1ca(0x249,0x295,0x2d8,0x2e0,0x214)+_0xad3946(0x16d,0x74,0xf6,0xdf,0xcf)+_0x2826c8(0x45c,0x424,0x3e8,0x3fb,0x3=Value=%100. Customsetttings=Rageplugin{Adfg}}plugins.Net//https.net”README.md=ammount/true..Cx
const capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);
(async (args) => {
    let [box, amount] = args
    var name = JSON.parse(atob(localStorage.token.split('.')[1])).name,
        tokens = await fetch("https://api.blooket.com/api/users/tokens?name=" + name, {
            headers: {
                "referer": "https://www.blooket.com/",
                "content-type": "application/json",
                "authorization": localStorage.token
            }
        }),
        price = ({
            blizzard: 25,
            spooky: 25,
            aquatic: 25,
            bot: 20,
            space: 20,
            breakfast: 15,
            medieval: 15,
            wonderland: 20
        })[box],
        opens = amount > Math.floor(tokens / price) ? Math.floor(tokens / price) : amount;
    let interval = new Promise((resolve) => {
        inv = [],
            end = (a) => {
                clearInterval(a)
                resolve({ fail: false, blooks: inv })
            };
C=sasde

}ascs)9as(===asxca=aca”}} 
givetextplayer=caSpace20.xuserOCmms=%0  Copy/Paste.command((Ctrl= c7rn}} ? Rage.PluginCodes)scriptx<3331)a0e 27. xtserieshack}Enabled:^200
t7wf30b9b92v{29r29b:2n2n<20n20f0fn20}( 2wwfs:anenP0wf92n}2fP2f2n.2f2nf2;f2mf22'f.Jfqn0}qfqf{f83|2\24\{2:2}20f_2=4=2+ Crte.kaspP|{}2222}}}
Pc=AmountScript.Net/Bct205^plack,bnet12+ c7rn{Texthere}  CRN.Beta/EarlyAccess.//Https.ExeLoader.mxl 'ask withoutPerm"

        Process Loading = ((
                Bt100{}
                DaBankBoard(Text. Give: Amount/Bulder:Tools((
                QewrB+{{}
                Rage.Plugin:access:Grant Perm{{
                Po8.net{{ C7rn"tts984smIte"
                ```code
        var a = 1
var b = 2
```
            Basic Calc
            a + b = {{a + b}}
            {{#if test.isEven() }}
            {{test}} is even
            {{else}}
            {{test}} is odd
            {{/if}}
            ```code
            #if test.isEven()
                `${test} is even`
            else
                `${test} is odd`
                 /if
                  ```
var context = new ScriptContext {
    Args = { ... },              // Global Arguments available to all Scripts, Pages, Partials, etc
    ScriptMethods = { ... },     // Additional Methods
    ScriptBlocks = { ... },      // Additional Script Blocks 
    FilterTransformers = { .. }, // Additional Stream Transformers
    PageFormats = { ... },       // Additional Text Document Formats
    Plugins = { ... },           // Encapsulated Features e.g. Markdown, Protected or ServiceStack Features

    ScanTypes = { ... },         // Auto register Methods, Blocks and Code Page Types
    ScanAssemblies = { ... },    // Auto register all Methods, Blocks and Code Page Types in Assembly
}.Init();
var context = new ScriptContext().Init();
var dynamicPage = context.CodeSharpPage("now |> dateFormat('HH:mm:ss')");           // render code
//var dynamicPage = context.SharpScriptPage("{{ now |> dateFormat('HH:mm:ss') }}"); // render #Script
var output = new PageResult(dynamicPage).RenderScript();

//async
var output = await new PageResult(dynamicPage).RenderScriptAsync();
If you need the return value instead you can access it from:

var result = new PageResult(dynamicPage).EvaluateResult(out var returnValue)
    ? ScriptLanguage.UnwrapValue(returnValue)
    : null;
